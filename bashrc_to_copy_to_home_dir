# .bashrc

# skip this file for non-interactive sessions
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# User specific aliases and functions
alias la='ls -a'
alias ll='ls -l'
alias ..='cd ..'
alias ...='cd ../..'
alias azlogin='az login --use-device-code && az acr login --name ciedevelop'
alias ack=ack-grep
alias vi=gvim
alias vir='vi --remote-tab'
alias fileshare='sudo mount -t cifs //fcfs1.pelco.org/Data /mnt/fcfs1 -o rw,user=jim.anderson'
alias ub='/home/jima/work/avig/unity/tools/ub'
alias vm='ssh mgdh46@mgdh46-dev-01.am.mot-solutions.com'
# JHA putting this here as this is where I went looking for it
# buildit tools/ub build t500 | ansi2txt >& dump

function sshc { ssh -i ~/.ssh/camera_rsa root@$1; }
function fcbuild { sshpass -p Pbse:282-1900 ssh omons_team@fcbuild${1}.pelco.org; }
function dotstat { git status .; }
function showtool { git difftool $1^ $1; }
function showfile { git difftool $1^ $1 -- $2; }
function acki { ack --ignore-dir=build/ $*; }
function ackd { rm -f dump && ack $* > /tmp/dump && mv /tmp/dump .; }
function ackdd { rm -f dump && ack $* > /tmp/dump && mv /tmp/dump . && vir dump; }

export PATH=/home/jima/bin:/home/jima/.local/bin:$PATH

# forces editor sessions from git to use gvim!
export VISUAL="$HOME/bin/vimgit.sh"

## pyenv configs
# export PYENV_ROOT="$HOME/.pyenv"
# export PATH="$PYENV_ROOT/bin:$PATH"
# if command -v pyenv 1>/dev/null 2>&1; then
  # eval "$(pyenv init -)"
# fi

source ~/bin/git-completion.bash

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# pnpm
export PNPM_HOME="/home/jima/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# direnv functions to give venv and workon commands from:
# https://treyhunner.com/2024/10/switching-from-virtualenvwrapper-to-direnv-starship-and-uv/
venv() {
    local venv_name
    local projects_file="$HOME/.projects"
    local dir_name=$(basename "$PWD")

    # If there are no arguments or the last argument starts with a dash, use dir_name
    if [ $# -eq 0 ] || [[ "${!#}" == -* ]]; then
        venv_name="$dir_name"
    else
        venv_name="${!#}"
        set -- "${@:1:$#-1}"
    fi

    # Check if .envrc already exists
    if [ -f .envrc ]; then
        echo "Error: .envrc already exists" >&2
        return 1
    fi

    if grep -Fq "^${venv_name} " ${projects_file}; then
        echo "Error: a project named ${venv_name} already exists" >&2
        return 1
    fi

    # Create venv
    if ! uv venv --quiet --seed --prompt "$venv_name" "$@" .venv; then
        echo "Error: Failed to create venv" >&2
        return 1
    fi

    source .venv/bin/activate

    # Create .envrc
    echo "layout python" > .envrc
    echo "unset PS1" >> .envrc

    # Append project name and directory to projects file
    echo "${venv_name} = ${PWD}" >> $projects_file

    # Allow direnv to immediately activate the virtual environment
    direnv allow

    if [ -f requirements.txt ]; then
        # Install requirements if requirements.txt exists
        uv pip install -r requirements.txt
    fi

}

workon() {
    local project_name="$1"
    local projects_file="$HOME/.projects"
    local project_dir
    # Check for projects config file
    if [[ ! -f "$projects_file" ]]; then
        echo "Error: $projects_file not found" >&2
        return 1
    fi

    # Get the project directory for the given project name
    project_dir=$(grep -E "^$project_name\s*=" "$projects_file" | sed 's/^[^=]*=\s*//')

    # Ensure a project directory was found
    if [[ -z "$project_dir" ]]; then
        echo "Error: Project '$project_name' not found in $projects_file" >&2
        return 1
    fi

    # Ensure the project directory exists
    if [[ ! -d "$project_dir" ]]; then
        echo "Error: Directory $project_dir does not exist" >&2
        return 1
    fi

    # Change directories
    cd "$project_dir"
}

rmvenv() {
    # Remove a virtual environment
    local venv_name
    local projects_file="$HOME/.projects"
    local dir_name=$(basename "$PWD")

    # If there are no arguments or the last argument starts with a dash, use dir_name
    if [ $# -eq 0 ] || [[ "${!#}" == -* ]]; then
        venv_name="$dir_name"
    else
        venv_name="${!#}"
        set -- "${@:1:$#-1}"
        workon $venv_name
    fi

    # Check if .envrc already exists
    if [ -f .envrc ]; then
        echo "Removing .envrc"
        rm .envrc
    fi

    if [ -d .venv ]; then
        echo "Removing .venv"
        rm -rf .venv
    fi

    if [ -d .direnv ]; then
        echo "Removing .direnv"
        rm -rf .direnv
    fi

    if grep -Fq ${venv_name} ${projects_file}; then
        echo "Removing ${venv_name} from ${projects_file}"
        sed -i "/^${venv_name}/d" ${projects_file}
    fi
}

_workon_completions()
{
  local projects_file="$HOME/.projects"
  # This little bit of nasty pulls the first word from each line of .projects
  x=$(awk '{ print $1 }' $projects_file)
  local suggestions=($(compgen -W "$x" -- "${COMP_WORDS[1]}"))

  if [ "${#suggestions[@]}" == "1" ]; then
    # if there's only one match, we remove the command literal
    # to proceed with the automatic completion of the number
    local project=$(echo ${suggestions[0]/%\ */})
    COMPREPLY=("$project")
  else
    # more than one suggestions resolved,
    # respond with the suggestions intact
    COMPREPLY=("${suggestions[@]}")
  fi
  return 0
}

# complete -o nospace -F _workon_completions workon
complete -F _workon_completions workon

eval "$(starship init bash)"
eval "$(direnv hook bash)"
export DIRENV_LOG_FORMAT=

eval "$(uv generate-shell-completion bash)"
eval "$(uvx --generate-shell-completion bash)"
